/* 
POSICIONAMIENTO CSS

La propiedad FLOAT y POSITION nos permiten modificar la posicion natural de cualquier elemento del documento HTML.

El navegador coloca cada elemento teniendo en cuenta el orden en el que aparecen en el documento y su tipo de visualizaci√≥n dependiendo si es un elemento de linea o de bloque.

Con FLOAT y POSITION podemos modificar este comportamiento.

Elementos flotantes
    -float: Convierte un elemento en flotante desplazamiento hasta la zona m√°s a la izquierda o m√°s a la derecha de la posici√≥n en la que originalmente se encontraba.

    -clear: Limpia la flotaci√≥n (left, right, both)

Tipos de posicionamiento:
    -static (default)
    -relative 
    -absolute
    -fixed
    -sticky

Para mover los elementos posicionados se activan las propiedades:
    -top (vertical -eje Y)
    -bottom (vertical -eje Y)
    -left (horizontal -ejeX)
    -right (horizontal -ejeX)
    z-index (profundidad - ejeZ)

Las propiedades top y left van a tener preferencia por sobre bottom y right respectivamente.

Estas 5 propiedades no funcionan con el valor de static. 


*/

.static{
    background-color: yellow;
    position: static;
    top:10px;
    left: 10px;
    /* No funcionaran porque es posicion estatica. üôÖüèª‚Äç‚ôÇÔ∏è */
}

.relative{
    background-color: rgb(138, 89, 184);
    position: relative;
    /* top:50px;
    left: 50px; */
    width: 300px;
    height: 50px;
    top:300px;
    left: 50px;
    bottom: 30px;
    /* Las propiedades top y left van a tener preferencia por sobre bottom y right respectivamente, es decir solo seran ignoradas por el navegador. */
}

.absoluta{
    position: absolute;
    background-color: red;
    width: 200px;
    height: 50px;
    right: 0px;
    bottom: 0px;
}

.relative-parent{
    background-color: khaki;
    width: 600px;
    height: 50px;
    position: relative;
    top:50px;
    left: 50px;
}

.absolute-child{
    background-color: lightcoral;
    position: absolute;
    bottom: 0px;
    right: 0px;
    /* Las propiedades top y left van a tener preferencia por sobre bottom y right respectivamente, es decir solo seran ignoradas por el navegador. */
}

.fixed{
    background-color: #d4e157;
    position: fixed;
    width: 300px;
    height: 100px;
    top: 30px;
    left: 400px;
    /* right: 20px;
    bottom: 10px; */
}

.sticky{
    background-color: #ffca28;
    position: sticky;
    top: 50px;
}

/* La posicion est√°tica es la mas d√©bil, es decir sera la que no se muestre o se oculte detras de las otras posiciones.  */

.sticky-parent{
    border: thin dashed #424242;
    height: 300px;
    /* su elemento contenedor debe tener dimensiones definidas y s√≥lo sera sticky dentro de las dimensiones de su contenedor padre. */
}

.sticky-child{
    background-color: #bdbdbd;
    position: sticky;
    top: 70px;
}

.z-index-1,
.z-index-2,
.z-index-3
{
    background-color:#8c9eff;
    border: thin solid black;
    height: 200px;
    width: 200px;
    position: relative;
/* Dar position diferente de static para que funcione el eje Z. */
}

.z-index-1{
    z-index: 1;
    /* z-index: 0; */
}

.z-index-2{
    top: -200px;
    left: 100px;
    /* z-index: 2;
    z-index: -1; */
}

.z-index-3{
    top: -400px;
    left: 230px;
    z-index: -1;
    /* Poner intervalos de 5 minimo, de 10 o 100 por si en el futuro es necesario ingresar una capa entre dos capas existentes. */
}

.z-index-parent{
    background-color: #d50000;
    width: 300px;
    height: 300px;
    position: relative;
    /* z-index: 1; Aqui no aplica porque no puede estar arriba de sus hijos üôÖüèª‚Äç‚ôÇÔ∏è */
}

.z-index-child{
    background-color: #c62828;
    width: 150px;
    height: 150px;
    position: relative;
    top: -75px;
    left: 75px;
    z-index: -1;
    /* pero si es necesario que el padre este adelante, solo se pone n√∫mero negativo al hijo, pero sin que el padre tenga un valor de z.index. */
}