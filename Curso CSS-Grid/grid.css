html {
    box-sizing: border-box;
    font-size: 16px;
    font-family: sans-serif;
    scroll-behavior: smooth;
} 

*,
*::after,
*::before {
    box-sizing: inherit;
}

a[href="#top"] {
    margin: 1rem;
    display: block;
    font-size: 2rem;
    text-align: center;
    text-decoration: none;
}

p {
    margin: 0;
}

h2 {
    margin-top: 50vh;
    text-align: center;
}

img {
    margin: auto;
    display: block;
    max-width: 100%;
    height: auto;
}

.menu {
    margin-bottom: 100vh;
    font-size: 125%;
}

.menu li {
    margin-bottom: 1rem;
}

.container {
    margin: 0 auto;
    width: 80%;
    height: 80vh;
    background-color: #222;
    border: medium solid #000;
}

.item {
    padding: 1rem;
    font-size: 1.25rem;
    background-color: #666;
    border: medium solid #999;
}

.sub-item{
    padding: 1rem;
    border: medium solid #ccc;
    background-color: rgb(169, 167, 167);
}

/* -----------GRID EXPLICITA---------- */
.grid-explicit{
    display: grid;
    /* Grid de 3x3 */
    grid-template-columns: 50% 100px 1fr;
    grid-template-rows: 2rem 20vh 30%;
    /* Grid de 5x4 */
    grid-template-columns: repeat(5, 20%);
    grid-template-rows: repeat(4, auto);
    /* repeat(cuantas lineas o columnas, su tama√±o) */
    /* Grid de 4x5 */
    grid-template-columns: 20% repeat(2, 30%) 20%;
    grid-template-rows: repeat(5, auto);
    /* Separacion de columnas y filas "OBSOLETO"*/
    grid-column-gap: 2rem;
    grid-row-gap: 2rem;
    grid-gap: 100px 0px;
    /* Separaci√≥n de filas y columnas actualizado */
    column-gap: 1rem;
    row-gap: 1rem;
    gap: 1vh 1vw;
    gap: 0;
    /* gap:distancia en fila distancia en columna; */
}

/* -------------POSICIONAMIENTO CON GRID LINES------------- */

.grid-explicit .item:nth-child(10){
    color: aqua;
    grid-row-start: 2;
    grid-row-end: 3;
    grid-column-start: 2;
    grid-column-end: 3;
    /* shortcut individualesüëáüèª */
    grid-row: 2 / 3;
    grid-column: 3 / 5;
    /* shortcut generalüëáüèª grid-row /grid-column*/
    grid-area: 2/3 3/5;
}

.grid-explicit .item:nth-child(12){
    color: greenyellow;
    /* Abarcamiento de espacio desde donde se ubica el origen */
    grid-row: span 2;
    grid-column: span 3;
}

.grid-explicit .item:nth-child(15){
    color: orangered;
    grid-row: 1 / span 2;
    grid-column: 1 / span 2;
}

/* ---------POSICIONAMIENTO CON NOMBRES DE GRID-LINES----------- */
.grid-line-names{
    display: grid;
    /* Grid de 3x3 */
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 1fr);
    /* Grid con nombres */
    grid-template-columns: [Linea-c1] 1fr [Linea-c2] 1fr [Linea-c3] 1fr [Linea-c4];
    grid-template-rows: [Linea-r1] 1fr [Linea-r2] 1fr [Linea-r3] 1fr [Linea-r4];
}

.grid-line-names .item:nth-child(3){
    color: aqua;
    grid-row: Linea-r3 / Linea-r4;
    grid-column: Linea-c1 / Linea-c4;
    /* El shortcut no existe y es complicado con nombres */
}

/* -------POSICIONMIENTO CON GRID AREAS------- */

.grid-areas{
    display: grid;
    /* Grid de 2x3 */
    grid-template-columns: 1fr 200px;
    grid-template-rows: 100px repeat(2, 1fr) 60px;
    /* Para la activaci√≥n en el padre se establecen los nombres con grid-template-areas*/
    grid-template-areas: "header header"
    "content sidebar"
    "content ."
    "footer footer";
}

/* En cada hijo se van activando con grid-area */
.header{
    grid-area: header;
}
.content{
    grid-area: content;
}
.sidebar{
    grid-area: sidebar;
}
.footer{
    grid-area: footer;
}

/* ------GRID IMPLICITA------- */

.grid-implicit{
    display: grid;
    display: inline-grid;
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(3, 200px);
    width: 40%;
}

/* 
Las grid son acopladas a elementos de bloque, aunque se pueden hacer en linea con display: inline-grid;

Grid expl√≠cita es cuando definimos la canidad de columnas y filas que tendra la grilla.


Grid impl√≠cita es cuando no se definieron la cantidad y dimensiones de las columnas y filas.
*/

/* -------FLUJO DE LA GRID----- */
.grid-flow{
    display: grid;
    /* Grid de 5x3 */
    grid-template-columns: repeat(5, 1fr);
    grid-template-rows: repeat(3, 180px);
    grid-auto-flow: row;
    /* valor por defecto: fila */
    grid-auto-flow: column;
    /* Direccion en fila o columna */

    /* Tambien se puede cambiar el tama√±o a los grids impl√≠citos, ejemplo: */
    grid-auto-rows: 100px;
    grid-auto-columns: 50px;
}

/* ----FLUJO DENSO DE LA GRID--- */
.grid-flow-dense{
    display: grid;
    /* Grid de 4x5 */
    grid-template-columns: repeat(5, 1fr);
    grid-template-rows: repeat(4, 200px);
    /* Grid-auto-flow: dense; nos permite acomodar las grillas en espacios sobrantes permitiendo minimizar las grids impl√≠citas */
    grid-auto-flow:column dense;
}

.grid-flow-dense .item:nth-child(11){
    color: aqua;
    grid-row: span 3;
    grid-column: span 3;
}

/* ---------GRID LAYERS: CELDAS EN CAPAS------- */

.grid-layers{
    display: grid;
    /* Grid de 4x4 */
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(4, 1fr);
}

.grid-layers .item:nth-child(1){
    background-color: chartreuse;
    grid-column: 1 / 3;
    grid-row: 1 / 3;
}

.grid-layers .item:nth-child(2){
    background-color: rgb(29, 55, 253);
    grid-column: 3 / 5;
    grid-row: 1 / 3;
}

.grid-layers .item:nth-child(3){
    background-color:orange;
    grid-column: 1 / 3;
    grid-row: 3 / 5;
}
.grid-layers .item:nth-child(4){
    background-color:orangered;
    grid-column: 3 / 5;
    grid-row: 3 / 5;
}

.grid-layers .item:nth-child(5){
    background-color:rgb(220, 3, 253);
    grid-column: 2 / 4;
    grid-row: 2 / 4;
    opacity: 0.75;
}

/* ----ORDEN Y ALINACI√ìN DE GRID ITEMS----- */
.grid-order{
    display: grid;
    /* Grid de 3x2 */
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 1fr);
    grid-auto-flow: column;
}

.grid-order .item:nth-child(1){
    /* Orden default es 0, van de -1 0 1 se acomodan los primeros los n√∫meros mas bajos*/
    order: 0;
    order: 1;
}

.grid-order .item:nth-child(2){
    order: 2;
}

.grid-order .item:nth-child(5){
    order: -1;
}

/* ----ALINEAMIENTO DE GRID ITEMS---- */
.grid-align{
    display: grid;
    /* Grid de 3x2 */
    grid-template-columns: repeat(3, 200px);
    grid-template-rows: repeat(2, 200px);
    /* Justify-items:stretch es por defecto 
    
    Justify itemas alinea los elementos en eje X horizontal*/
    justify-items: stretch;
    justify-items: center;

    /* Align itemas alinea los elementos en eje Y vertical, stretch es valor por defecto*/
    align-items: stretch;
    align-items: center;
}

.item{
    border: thin black solid;
}

/* Para alinaer un solo item: */
.grid-align .item:nth-child(4){
    justify-self: start;
    align-self: end;
}

/* ----Alineamiento de Grid Tracks---- */
.grid-align-tracks{
    display: grid;
    /* Grid de 3x2 */
    grid-template-columns: repeat(3, 200px);
    grid-template-rows: repeat(2, 200px);
    /* justify-content: stretch; es por defecto, justify-content alinea en eje horizontal eje X*/
    justify-content: flex-end;
    justify-content: space-around;
    /* align-content: stretch; es el valor por defecto y align-content alinea en el eje vertical eje Y  */  align-content: space-around; 
}

/* ----Tama√±os M√°ximos y M√≠nimos de Grid Tracks---- */
.grid-min-max{
    display: grid;
    /* Grid de 4x? */
    /* Se define un tama√±o minimo y maximo del tama√±o del track, los pixeles son unidades absolutas, es decir no dinamicas.*/
    grid-template-columns: repeat(4, minmax(150px, 200px));
    grid-template-columns: repeat(4, minmax(min-content, 200px));
    grid-template-columns: repeat(4, minmax(70px, min-content));
    grid-template-columns: repeat(4, minmax(min-content,max-content ));
}

/* ----Grid con Patrones Repetitivos----- */
.grid-repeat{
    display: grid;
    /* Grid de 4x? */
    grid-template-columns: repeat(1, 10% 20%  30% 40%);
    grid-template-rows: repeat(2, 10vh 20vh);

    grid-auto-rows: 50px;
}

/* ---Grids Din√°micas--- */
.grid-dynamics{
    display: grid;
    /* Grid de 4x? */
    grid-template-columns: repeat(4, 100px);
    /* auto-fill: Rellena la grid con tracks generados dinamicamente */
    grid-template-columns: repeat(auto-fill, 100px);
    /* auto-fit: ajusta la grid con los tracks existentes, es decir  */
    grid-template-columns: repeat(auto-fit, 100px);
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    /* Esta ajustando la GRID por si se anexan mas items ‚òùüèª */
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    /* Se ajusta dependinedo del tama√±o del contenedor, es decir revisa cuantos pueden entrar dependiendo el tama√±o proporcional de cada item */
}

/* ----Responsive sin Media Queries---
 */
.grid-responsive{
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}

/* ----Grids Anidados---- */
.grid-nested,
.item{
    display: grid;
    /* Grid de 3x? */
    grid-template-columns: repeat(3, 1fr);
}

.grid{
    display: grid;
    /* Grid de 3x4 */
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(4, 1fr);
}

.subgrid{
    /* Para que la caracteristica de subgrid funcione se debe hacer lo siguiente: 
    1. Definir explicitamente el tama√±o que ocupara el elemento que aplicara subgrid dentro del contenedor padre grid, es decir definir sus propiedades grid-column y grid-row*/
    grid-column: 1 / 4;
    grid-row:1 / 3;
    /* 2. Aplicar display grid al elemento que aplicara subgrid  */
    display: grid;
    /* 3. Aplicar el valor de subgrid  a las columnas, a las filas o ambas depende sea el caso requerido. */
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
}
